#include <dummy.h>
#define BLYNK_TEMPLATE_ID "TMPL20h3gVmej"
#define BLYNK_TEMPLATE_NAME "Quickstart Template"
#define BLYNK_AUTH_TOKEN "-R29Q7Yfv6JZu2oyvJL7BFv9GG4r8bp4"

#define BLYNK_PRINT Serial
#define BLYNK_DEBUG

#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include "esp_sleep.h"

extern "C" {
  #include "esp_wpa2.h"
}

// üîê WPA2 Enterprise WiFi
#define EAP_IDENTITY "ftell007"
#define EAP_PASSWORD "Kenankomutan123."
const char* ssid = "FIU_SECUREWiFi";

char auth[] = BLYNK_AUTH_TOKEN;
BlynkTimer timer;

// üìå GPIO Pins
#define CHARGE_PIN     27
#define MEASURE_PIN    34
#define DISCHARGE_PIN  25
#define GREEN_LED      21
#define RED_LED        22
#define BUTTON_PIN     25      // Physical push-button to toggle measurement
#define FAN_POWER_GPIO 33
#define FAN_SPEED_GPIO 26

// üìè Constants
#define R              100000.0
#define THRESHOLD_NF   100.0

// üîå Virtual Pins
#define VPIN_MEASURE_SWITCH V0
#define VPIN_CAPACITANCE    V1
#define VPIN_LED_RED_NEW    V20
#define VPIN_LED_GREEN_NEW  V21
#define VPIN_FAN_POWER      V5
#define VPIN_FAN_SPEED      V10

bool isRunning = false;
bool fanIsOn = false;
int fanSpeedLevel = 1;

// Connect to WPA2 Enterprise WiFi (unchanged)
void connectToWiFiEnterprise() {
  WiFi.disconnect(true);
  WiFi.mode(WIFI_STA);

  esp_wifi_sta_wpa2_ent_set_identity((uint8_t *)EAP_IDENTITY, strlen(EAP_IDENTITY));
  esp_wifi_sta_wpa2_ent_set_username((uint8_t *)EAP_IDENTITY, strlen(EAP_IDENTITY));
  esp_wifi_sta_wpa2_ent_set_password((uint8_t *)EAP_PASSWORD, strlen(EAP_PASSWORD));
  esp_wifi_sta_wpa2_ent_enable();

  WiFi.begin(ssid);
  Serial.print("Connecting to ");
  Serial.println(ssid);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\n‚úÖ Connected to WiFi!");
  Serial.print("üì° IP Address: ");
  Serial.println(WiFi.localIP());
}

void setup() {
  Serial.begin(115200);

  pinMode(CHARGE_PIN, OUTPUT);
  pinMode(MEASURE_PIN, INPUT);
  pinMode(DISCHARGE_PIN, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);
  pinMode(RED_LED, OUTPUT);
  pinMode(FAN_POWER_GPIO, OUTPUT);
  pinMode(FAN_SPEED_GPIO, OUTPUT);

  pinMode(BUTTON_PIN, INPUT_PULLUP);

  digitalWrite(CHARGE_PIN, LOW);
  digitalWrite(DISCHARGE_PIN, LOW);
  digitalWrite(GREEN_LED, LOW);
  digitalWrite(RED_LED, LOW);
  digitalWrite(FAN_POWER_GPIO, HIGH); // HIGH = fan OFF
  digitalWrite(FAN_SPEED_GPIO, LOW);

  connectToWiFiEnterprise();
  Blynk.config(auth);
  Blynk.connect();

  timer.setInterval(1000L, measureCapacitance);
}

void loop() {
  Blynk.run();
  timer.run();

  static bool lastButtonState = HIGH;
  bool currentButtonState = digitalRead(BUTTON_PIN);

  if (lastButtonState == HIGH && currentButtonState == LOW) {
    isRunning = !isRunning;
    Serial.println(isRunning ? "üü¢ Measurement ON (via button)" : "üî¥ Measurement OFF (via button)");

    if (!isRunning) {
      // Turn off peripherals
      digitalWrite(GREEN_LED, LOW);
      digitalWrite(RED_LED, LOW);
      digitalWrite(CHARGE_PIN, LOW);
      digitalWrite(DISCHARGE_PIN, LOW);
      Blynk.virtualWrite(VPIN_MEASURE_SWITCH, 0);
      Blynk.virtualWrite(VPIN_LED_RED_NEW, 0);
      Blynk.virtualWrite(VPIN_LED_GREEN_NEW, 0);

      Serial.println("Entering deep sleep mode...");

      // Configure deep sleep wakeup on button pin (active LOW)
      esp_sleep_enable_ext0_wakeup((gpio_num_t)BUTTON_PIN, 0);

      delay(100); // Small delay to allow serial to flush

      // Enter deep sleep
      esp_deep_sleep_start();

      // After this point, ESP32 will restart when waking up
    } else {
      Blynk.virtualWrite(VPIN_MEASURE_SWITCH, 1);
    }

    delay(300); // debounce
  }

  lastButtonState = currentButtonState;
}

// Blynk switch on virtual pin V0
BLYNK_WRITE(VPIN_MEASURE_SWITCH) {
  isRunning = param.asInt();
  Serial.println(isRunning ? "üü¢ Measurement ON via Blynk (V0)" : "üî¥ Measurement OFF via Blynk (V0)");

  if (!isRunning) {
    digitalWrite(GREEN_LED, LOW);
    digitalWrite(RED_LED, LOW);
    digitalWrite(CHARGE_PIN, LOW);
    digitalWrite(DISCHARGE_PIN, LOW);
    Blynk.virtualWrite(VPIN_LED_RED_NEW, 0);
    Blynk.virtualWrite(VPIN_LED_GREEN_NEW, 0);
  }
}

// Fan Power Control (V5)
BLYNK_WRITE(VPIN_FAN_POWER) {
  fanIsOn = param.asInt();
  digitalWrite(FAN_POWER_GPIO, fanIsOn ? LOW : HIGH); // LOW = ON
  Serial.println(fanIsOn ? "üí® Fan ON" : "üõë Fan OFF");
  Blynk.virtualWrite(VPIN_FAN_POWER, fanIsOn);
}

// Fan Speed Control (V10)
BLYNK_WRITE(VPIN_FAN_SPEED) {
  fanSpeedLevel = constrain(param.asInt(), 1, 5);
  Serial.print("üîÅ Fan Speed Level: ");
  Serial.println(fanSpeedLevel);

  for (int i = 0; i < fanSpeedLevel; i++) {
    digitalWrite(FAN_SPEED_GPIO, HIGH);
    delay(100);
    digitalWrite(FAN_SPEED_GPIO, LOW);
    delay(100);
  }
}

// Capacitance measurement function
void measureCapacitance() {
  if (!isRunning) return;

  digitalWrite(DISCHARGE_PIN, HIGH);
  delay(100);
  digitalWrite(DISCHARGE_PIN, LOW);

  digitalWrite(CHARGE_PIN, HIGH);
  unsigned long startTime = micros();
  unsigned long timeout = startTime + 300000;

  while (analogRead(MEASURE_PIN) < 1860 && micros() < timeout) {}

  digitalWrite(CHARGE_PIN, LOW);

  if (micros() >= timeout) {
    Serial.println("‚ö†Ô∏è Timeout: Capacitance too high or disconnected.");
    digitalWrite(GREEN_LED, LOW);
    digitalWrite(RED_LED, LOW);
    Blynk.virtualWrite(VPIN_LED_RED_NEW, 0);
    Blynk.virtualWrite(VPIN_LED_GREEN_NEW, 0);
    return;
  }

  unsigned long elapsedTime = micros() - startTime;
  float capacitance = (float)elapsedTime / (R * 0.693);
  float capacitance_nF = capacitance * 1000;

  Serial.print("üìè Capacitance: ");
  Serial.print(capacitance_nF, 3);
  Serial.println(" nF");

  Blynk.virtualWrite(VPIN_CAPACITANCE, capacitance_nF);

  if (capacitance_nF >= THRESHOLD_NF) {
    digitalWrite(GREEN_LED, LOW);
    digitalWrite(RED_LED, HIGH);
    Blynk.virtualWrite(VPIN_LED_RED_NEW, 255);
    Blynk.virtualWrite(VPIN_LED_GREEN_NEW, 0);
  } else {
    digitalWrite(GREEN_LED, HIGH);
    digitalWrite(RED_LED, LOW);
    Blynk.virtualWrite(VPIN_LED_RED_NEW, 0);
    Blynk.virtualWrite(VPIN_LED_GREEN_NEW, 255);
  }
}
